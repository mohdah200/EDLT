{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a0ee0694",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Juba\\.conda\\envs\\py3.6\\lib\\site-packages\\tqdm\\auto.py:22: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Input, Dense\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
    "lb_make=LabelEncoder()\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Input, Dense, Lambda\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.losses import mse\n",
    "from tensorflow.keras import backend as K\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import Input, Dense, Lambda\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.losses import mse\n",
    "from tensorflow.keras import backend as K\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.neighbors import KernelDensity\n",
    "# Set a random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "tf.random.set_seed(42)\n",
    "\n",
    "from sklearn.metrics import roc_auc_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1380ea1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\adversarial_analysis-master\\Investigating_the_Practicality_of_Adversarial_Evasion_Attacks_on_Network_Intrusion_Detection\\XAAE-IIoT\\ON\n"
     ]
    }
   ],
   "source": [
    "cd C:\\adversarial_analysis-master\\Investigating_the_Practicality_of_Adversarial_Evasion_Attacks_on_Network_Intrusion_Detection\\XAAE-IIoT\\ON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0dc4c6fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define device for PyTorch (using GPU if available)\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "import torch.nn.functional as F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d4063218",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "missing_values = [\"n/a\", \"na\", \"Infinity\", \"NaN\", \"nan\", \"-\", \"excel\", \"?\", \"#DIV/0!\", \"aza\"]\n",
    "df = pd.read_csv(\"df_training.csv\", na_values=missing_values, engine='python', skipinitialspace=True)\n",
    "df = df.fillna(df.median())\n",
    "\n",
    "normal_data = df[df['class3'] == 0].drop('class3', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b33d2416",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scale the features\n",
    "scaler = MinMaxScaler()\n",
    "normal_data_scaled = scaler.fit_transform(normal_data)\n",
    "\n",
    "# Create PyTorch DataLoader for the normal data\n",
    "normal_data_tensor = torch.tensor(normal_data_scaled, dtype=torch.float32)\n",
    "train_loader = DataLoader(TensorDataset(normal_data_tensor, normal_data_tensor), batch_size=32, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c8ad6f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Section 2: Define the VAE Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0c705d33",
   "metadata": {},
   "outputs": [],
   "source": [
    "class VAE(nn.Module):\n",
    "    def __init__(self, input_dim, latent_dim):\n",
    "        super(VAE, self).__init__()\n",
    "        # Encoder\n",
    "        self.fc1 = nn.Linear(input_dim, 512)\n",
    "        self.fc21 = nn.Linear(512, latent_dim)  # Mean of the latent space\n",
    "        self.fc22 = nn.Linear(512, latent_dim)  # Standard deviation of the latent space\n",
    "        # Decoder\n",
    "        self.fc3 = nn.Linear(latent_dim, 512)\n",
    "        self.fc4 = nn.Linear(512, input_dim)\n",
    "\n",
    "    def encode(self, x):\n",
    "        h1 = F.relu(self.fc1(x))\n",
    "        return self.fc21(h1), self.fc22(h1)\n",
    "\n",
    "    def reparameterize(self, mu, logvar):\n",
    "        std = torch.exp(0.5 * logvar)\n",
    "        eps = torch.randn_like(std)\n",
    "        return mu + eps * std\n",
    "\n",
    "    def decode(self, z):\n",
    "        h3 = F.relu(self.fc3(z))\n",
    "        return torch.sigmoid(self.fc4(h3))\n",
    "\n",
    "    def forward(self, x):\n",
    "        mu, logvar = self.encode(x)\n",
    "        z = self.reparameterize(mu, logvar)\n",
    "        return self.decode(z), mu, logvar\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0bb78b7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vae_loss_function(recon_x, x, mu, logvar):\n",
    "    BCE = F.binary_cross_entropy(recon_x, x.view(-1, input_dim), reduction='sum')\n",
    "    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n",
    "    return BCE + KLD\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9decc348",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_dim = normal_data.shape[1]  # Number of features in the normal_data subset\n",
    "latent_dim = 20  # Example latent dimension size\n",
    "model = VAE(input_dim, latent_dim)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7138142b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Section 3: Define the Planar Flow Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f8ec7bfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import numpy as np\n",
    "\n",
    "class LearnableClamp(nn.Module):\n",
    "    def __init__(self, initial_min, initial_max):\n",
    "        super(LearnableClamp, self).__init__()\n",
    "        # Ensure the parameters are of floating point type\n",
    "        self.min = nn.Parameter(torch.tensor([initial_min], dtype=torch.float))\n",
    "        self.max = nn.Parameter(torch.tensor([initial_max], dtype=torch.float))\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Apply clamping with learnable min and max\n",
    "        return torch.clamp(x, min=self.min, max=self.max)\n",
    "\n",
    "class CouplingFlow(nn.Module):\n",
    "    def __init__(self, latent_dim, clamp_min=-3.0, clamp_max=3.0):\n",
    "        super(CouplingFlow, self).__init__()\n",
    "        self.latent_dim = latent_dim\n",
    "        mid_dim = latent_dim // 2\n",
    "\n",
    "        # Layers for the transformation\n",
    "        self.fc1 = nn.Linear(mid_dim, 256)\n",
    "        self.fc2 = nn.Linear(256, 256)\n",
    "        self.scale_transform = nn.Linear(256, mid_dim)\n",
    "        self.translate = nn.Linear(256, mid_dim)\n",
    "\n",
    "        # Learnable clamping for the scale parameter\n",
    "        self.scale_clamp = LearnableClamp(clamp_min, clamp_max)\n",
    "\n",
    "        # Initialize a fixed permutation and convert to long tensor\n",
    "        self.register_buffer('permutation', torch.tensor(np.random.permutation(latent_dim)).long())\n",
    "\n",
    "    def forward(self, z):\n",
    "        # Apply permutation\n",
    "        z = z[:, self.permutation]\n",
    "\n",
    "        # Split and transform\n",
    "        z1, z2 = z[:, :self.latent_dim // 2], z[:, self.latent_dim // 2:]\n",
    "        h = F.relu(self.fc1(z1))\n",
    "        h = F.relu(self.fc2(h))\n",
    "\n",
    "        # Apply learnable clamping to the scale parameter\n",
    "        scale = torch.sigmoid(self.scale_transform(h))\n",
    "        scale = self.scale_clamp(scale)\n",
    "\n",
    "        translate = self.translate(h)\n",
    "        z2 = z2 * scale + translate\n",
    "\n",
    "        # Combine the two parts\n",
    "        z_prime = torch.cat([z1, z2], dim=1)\n",
    "\n",
    "        # Compute log determinant of the Jacobian\n",
    "        # We add a small constant 1e-6 to the scale before taking log to prevent NaNs\n",
    "        log_det_jacobian = torch.sum(torch.log(torch.abs(scale) + 1e-6), dim=1)\n",
    "\n",
    "        return z_prime, log_det_jacobian\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "49b62c2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class StackedCouplingFlows(nn.Module):\n",
    "    def __init__(self, latent_dim, num_flows):\n",
    "        super(StackedCouplingFlows, self).__init__()\n",
    "        self.flows = nn.ModuleList([CouplingFlow(latent_dim) for _ in range(num_flows)])\n",
    "\n",
    "    def forward(self, z):\n",
    "        total_log_det_jacobian = 0\n",
    "        for flow in self.flows:\n",
    "            z, log_det_jacobian = flow(z)\n",
    "            total_log_det_jacobian += log_det_jacobian\n",
    "        return z, total_log_det_jacobian\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9c0d601e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parameters\n",
    "latent_dim = 4  # Specify the latent dimension\n",
    "num_flows = 3   # Number of CouplingFlow layers\n",
    "\n",
    "# Create the model\n",
    "model = StackedCouplingFlows(latent_dim=latent_dim, num_flows=num_flows)\n",
    "\n",
    "# Example input (e.g., a batch of data)\n",
    "z = torch.randn(10, latent_dim)  # Batch of 10 samples\n",
    "\n",
    "# Forward pass through the model\n",
    "z_transformed, total_log_det_jacobian = model(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "674b440e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Section 4: Define the Loss Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ac5ef268",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vae_loss_function(recon_x, x, mu, logvar):\n",
    "    BCE = F.binary_cross_entropy(recon_x, x.view(-1, input_dim), reduction='sum')\n",
    "    KLD = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())\n",
    "    return BCE + KLD\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2f995ad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# NF Loss Function\n",
    "def nf_loss_function(z, z_prime, log_det_jacobian):\n",
    "    # Assuming a standard Gaussian for the latent space\n",
    "    log_pz_prime = -0.5 * (z_prime.pow(2).sum(dim=1) + torch.log(torch.tensor(2 * torch.pi)))\n",
    "\n",
    "    # Compute the log-likelihood for each transformed data point\n",
    "    NF_loss = torch.mean(log_pz_prime + log_det_jacobian)\n",
    "\n",
    "    return -NF_loss  # Negative since we maximize log likelihood\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf04a109",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bdad3551",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Section 5: Anomaly Detection Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "564c0d21",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_threshold(differential_entropies):\n",
    "    mean_entropy = differential_entropies.mean()\n",
    "    std_entropy = differential_entropies.std()\n",
    "    threshold = mean_entropy + 2 * std_entropy\n",
    "    return threshold\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bff1d173",
   "metadata": {},
   "outputs": [],
   "source": [
    "vae = VAE(input_dim, latent_dim).to(device)\n",
    "optimizer = optim.Adam(vae.parameters(), lr=1e-3)\n",
    "num_epochs=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "275daeba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/10], Loss: 182.14016723632812\n",
      "Epoch [2/10], Loss: 174.82078552246094\n",
      "Epoch [3/10], Loss: 190.43316650390625\n",
      "Epoch [4/10], Loss: 182.14254760742188\n",
      "Epoch [5/10], Loss: 179.39662170410156\n",
      "Epoch [6/10], Loss: 181.6753387451172\n",
      "Epoch [7/10], Loss: 185.78692626953125\n",
      "Epoch [8/10], Loss: 189.75607299804688\n",
      "Epoch [9/10], Loss: 184.1693115234375\n",
      "Epoch [10/10], Loss: 171.15621948242188\n"
     ]
    }
   ],
   "source": [
    "\n",
    "for epoch in range(num_epochs):\n",
    "    for data, _ in train_loader:\n",
    "        data = data.to(device)\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        # Forward pass\n",
    "        reconstructed, mu, logvar = vae(data)\n",
    "\n",
    "        # Compute loss\n",
    "        loss = vae_loss_function(reconstructed, data, mu, logvar)\n",
    "\n",
    "        # Backward pass and optimize\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "    print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item()}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dad3d846",
   "metadata": {},
   "outputs": [],
   "source": [
    "for param in vae.parameters():\n",
    "    param.requires_grad = False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "666dcacb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "' nf = PlanarFlow(latent_dim).to(device)\\noptimizer_nf = torch.optim.Adam(nf.parameters(), lr=1e-3)\\n#nf_epochs=5\\nfor epoch in range(nf_epochs):\\n    for data, _ in train_loader:\\n        data = data.to(device)\\n        with torch.no_grad():\\n            mu, logvar = vae.encode(data)\\n            z = vae.reparameterize(mu, logvar)\\n        \\n        z_prime, log_det_jacobian = nf(z)\\n        nf_loss = -torch.mean(log_det_jacobian)\\n        optimizer_nf.zero_grad()\\n        nf_loss.backward()\\n        optimizer_nf.step() '"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "''' nf = PlanarFlow(latent_dim).to(device)\n",
    "optimizer_nf = torch.optim.Adam(nf.parameters(), lr=1e-3)\n",
    "#nf_epochs=5\n",
    "for epoch in range(nf_epochs):\n",
    "    for data, _ in train_loader:\n",
    "        data = data.to(device)\n",
    "        with torch.no_grad():\n",
    "            mu, logvar = vae.encode(data)\n",
    "            z = vae.reparameterize(mu, logvar)\n",
    "        \n",
    "        z_prime, log_det_jacobian = nf(z)\n",
    "        nf_loss = -torch.mean(log_det_jacobian)\n",
    "        optimizer_nf.zero_grad()\n",
    "        nf_loss.backward()\n",
    "        optimizer_nf.step() '''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "16efa7d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instantiate StackedCouplingFlows instead of a single CouplingFlow\n",
    "nf = StackedCouplingFlows(latent_dim=latent_dim, num_flows=num_flows).to(device)\n",
    "optimizer_nf = torch.optim.Adam(nf.parameters(), lr=1e-3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "954ff982",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NF Epoch [1/10], Loss: 2.9319\n",
      "NF Epoch [2/10], Loss: 2.9190\n",
      "NF Epoch [3/10], Loss: 2.9131\n",
      "NF Epoch [4/10], Loss: 2.9086\n",
      "NF Epoch [5/10], Loss: 2.8978\n",
      "NF Epoch [6/10], Loss: 2.8998\n",
      "NF Epoch [7/10], Loss: 2.8982\n",
      "NF Epoch [8/10], Loss: 2.9004\n",
      "NF Epoch [9/10], Loss: 2.9006\n",
      "NF Epoch [10/10], Loss: 2.8978\n"
     ]
    }
   ],
   "source": [
    "\n",
    "nf_epochs = 10  # Number of epochs for training NF\n",
    "\n",
    "# Train Normalizing Flow\n",
    "for epoch in range(nf_epochs):\n",
    "    total_nf_loss = 0\n",
    "    for data, _ in train_loader:\n",
    "        data = data.to(device)\n",
    "        optimizer_nf.zero_grad()\n",
    "\n",
    "        with torch.no_grad():\n",
    "            mu, logvar = vae.encode(data)\n",
    "            z = vae.reparameterize(mu, logvar)\n",
    "        \n",
    "        # Forward pass through the stacked NF model\n",
    "        z_prime, total_log_det_jacobian = nf(z)\n",
    "\n",
    "        # Compute NF loss using the modified loss function\n",
    "        nf_loss = nf_loss_function(z, z_prime, total_log_det_jacobian)\n",
    "\n",
    "        # Backward pass and optimize\n",
    "        nf_loss.backward()\n",
    "        optimizer_nf.step()\n",
    "\n",
    "        total_nf_loss += nf_loss.item()\n",
    "\n",
    "    average_nf_loss = total_nf_loss / len(train_loader)\n",
    "    print(f\"NF Epoch [{epoch+1}/{nf_epochs}], Loss: {average_nf_loss:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "40a9f216",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save VAE model\n",
    "torch.save(vae.state_dict(), 'vae_model_dis-Stackedcoupling-Permt-learnable-10-IIoT.pth')\n",
    "\n",
    "# Save NF model\n",
    "torch.save(nf.state_dict(), 'nf_model_dis-Stackedcoupling-Permt-Lernable-10-IIoT.pth')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "517d5e12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "StackedCouplingFlows(\n",
       "  (flows): ModuleList(\n",
       "    (0): CouplingFlow(\n",
       "      (fc1): Linear(in_features=2, out_features=256, bias=True)\n",
       "      (fc2): Linear(in_features=256, out_features=256, bias=True)\n",
       "      (scale_transform): Linear(in_features=256, out_features=2, bias=True)\n",
       "      (translate): Linear(in_features=256, out_features=2, bias=True)\n",
       "      (scale_clamp): LearnableClamp()\n",
       "    )\n",
       "    (1): CouplingFlow(\n",
       "      (fc1): Linear(in_features=2, out_features=256, bias=True)\n",
       "      (fc2): Linear(in_features=256, out_features=256, bias=True)\n",
       "      (scale_transform): Linear(in_features=256, out_features=2, bias=True)\n",
       "      (translate): Linear(in_features=256, out_features=2, bias=True)\n",
       "      (scale_clamp): LearnableClamp()\n",
       "    )\n",
       "    (2): CouplingFlow(\n",
       "      (fc1): Linear(in_features=2, out_features=256, bias=True)\n",
       "      (fc2): Linear(in_features=256, out_features=256, bias=True)\n",
       "      (scale_transform): Linear(in_features=256, out_features=2, bias=True)\n",
       "      (translate): Linear(in_features=256, out_features=2, bias=True)\n",
       "      (scale_clamp): LearnableClamp()\n",
       "    )\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the trained state_dicts\n",
    "vae.load_state_dict(torch.load('vae_model_dis-Stackedcoupling-Permt-learnable-10-IIoT.pth'))\n",
    "nf.load_state_dict(torch.load('nf_model_dis-Stackedcoupling-Permt-Lernable-10-IIoT.pth'))\n",
    "\n",
    "# Move models to evaluation mode\n",
    "vae.eval()\n",
    "nf.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b5e79842",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "test_df = pd.read_csv('df_testing.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1c88591c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace 'normal' with 0 and 'attack' with 1 in the last column\n",
    "#test_df['class3'] = test_df['class3'].replace({'normal': 0, 'attack': 1})\n",
    "\n",
    "# Now proceed with separating features and labels\n",
    "X_test = test_df.iloc[:, :-1].values\n",
    "y_test = test_df['class3'].values\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n",
    "y_test_tensor = torch.tensor(y_test, dtype=torch.long)\n",
    "\n",
    "# Create a TensorDataset\n",
    "test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n",
    "\n",
    "# Create a DataLoader\n",
    "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fee3a487",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "17be6cec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def detect_anomalies(vae, nf, data_loader, threshold=None):\n",
    "    vae.eval()\n",
    "    nf.eval()\n",
    "    all_entropies = []\n",
    "    anomaly_indices = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch_idx, (data, _) in enumerate(data_loader):\n",
    "            data = data.to(device)\n",
    "            _, mu, logvar = vae(data)\n",
    "            z = vae.reparameterize(mu, logvar)\n",
    "\n",
    "            z_prime, log_det_jacobian = nf(z)\n",
    "\n",
    "            # Base Gaussian differential entropy\n",
    "            base_entropy = 0.5 + 0.5 * torch.log(2 * torch.pi * torch.exp(logvar))\n",
    "            base_entropy = base_entropy.sum(dim=1)  # Sum across the latent dimensions\n",
    "\n",
    "            # Ensure log_det_jacobian is [batch_size]\n",
    "            # If it's already [batch_size], no need for summing\n",
    "            # log_det_jacobian = log_det_jacobian.sum(dim=1)  # Uncomment only if needed\n",
    "\n",
    "            # Overall differential entropy\n",
    "            differential_entropy = base_entropy - log_det_jacobian\n",
    "            all_entropies.append(differential_entropy)\n",
    "\n",
    "            if threshold is None:\n",
    "                threshold = calculate_threshold(torch.cat(all_entropies))\n",
    "\n",
    "            batch_anomaly_flags = (differential_entropy < threshold)\n",
    "            anomaly_indices.extend(batch_idx * data_loader.batch_size + idx for idx, flag in enumerate(batch_anomaly_flags) if flag)\n",
    "\n",
    "    return anomaly_indices, threshold\n",
    "\n",
    "# Usage Example\n",
    "# anomaly_indices, threshold = detect_anomalies(vae, nf, test_loader, threshold_value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "82ee4e1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Detect anomalies\n",
    "anomalies, threshold = detect_anomalies(vae, nf, train_loader, None)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "072a586f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(5.9101)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "threshold # train tensor(2.0210)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2a01f7f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_threshold(differential_entropies):\n",
    "    # Calculate the 95th percentile of the differential entropies\n",
    "    threshold = torch.quantile(differential_entropies, 0.95)\n",
    "    return threshold\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f1a8c4cf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8761390770430291\n",
      "Precision: 0.811969573143899\n",
      "Recall: 0.9701066546492414\n",
      "F1 Score: 0.8840217651688854\n",
      "roc_auc Score: 0.8785918399723356\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Detect anomalies\n",
    "anomaly_indices, _ = detect_anomalies(vae, nf, test_loader, 2.5)\n",
    "\n",
    "# Initialize an array for predictions\n",
    "predictions = [0] * len(test_loader.dataset)  # Initialize all as normal\n",
    "for idx in anomaly_indices:\n",
    "    predictions[idx] = 1  # Mark as anomaly\n",
    "\n",
    "# True labels\n",
    "actual_labels = test_df['class3'].values  # Replace 'label' with the actual label column name\n",
    "\n",
    "# Calculate metrics\n",
    "accuracy = accuracy_score(actual_labels, predictions)\n",
    "precision = precision_score(actual_labels, predictions)\n",
    "recall = recall_score(actual_labels, predictions)\n",
    "f1 = f1_score(actual_labels, predictions)\n",
    "roc_auc = roc_auc_score(actual_labels, predictions)\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n",
    "\n",
    "\n",
    "# Print metrics\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(f'Precision: {precision}')\n",
    "print(f'Recall: {recall}')\n",
    "print(f'F1 Score: {f1}')\n",
    "print(f'roc_auc Score: {roc_auc}')\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Assuming actual_labels and predictions are defined\n",
    "cm = confusion_matrix(actual_labels, predictions)\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap='Blues')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "cf35b274",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 36180,   5962],\n",
       "       [ 23341, 334971]], dtype=int64)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "33eb26a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df2 = pd.read_csv('df_testing.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c928bdf1",
   "metadata": {},
   "source": [
    "cm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "88fa674c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace 'normal' with 0 and 'attack' with 1 in the last column\n",
    "#test_df['class3'] = test_df['class3'].replace({'normal': 0, 'attack': 1})\n",
    "\n",
    "# Now proceed with separating features and labels\n",
    "X_test2 = test_df2.iloc[:, :-1].values\n",
    "y_test2= test_df2['class3'].values\n",
    "\n",
    "# Convert to PyTorch tensors\n",
    "X_test_tensor2 = torch.tensor(X_test2, dtype=torch.float32)\n",
    "y_test_tensor2 = torch.tensor(y_test2, dtype=torch.long)\n",
    "\n",
    "# Create a TensorDataset\n",
    "test_dataset2 = TensorDataset(X_test_tensor2, y_test_tensor2)\n",
    "\n",
    "# Create a DataLoader\n",
    "test_loader2 = DataLoader(test_dataset2, batch_size=32, shuffle=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f2483bf4",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'test_loader2' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-27-b66b62798a0c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# Detect anomalies\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0manomaly_indices\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0m_\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdetect_anomalies\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvae\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtest_loader2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m2.5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m# Initialize an array for predictions\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m*\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtest_loader2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[1;33m)\u001b[0m  \u001b[1;31m# Initialize all as normal\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'test_loader2' is not defined"
     ]
    }
   ],
   "source": [
    "# Detect anomalies\n",
    "anomaly_indices, _ = detect_anomalies(vae, nf, test_loader2,2.5)\n",
    "\n",
    "# Initialize an array for predictions\n",
    "predictions = [0] * len(test_loader2.dataset)  # Initialize all as normal\n",
    "for idx in anomaly_indices:\n",
    "    predictions[idx] = 1  # Mark as anomaly\n",
    "\n",
    "# True labels\n",
    "actual_labels = test_df['class3'].values  # Replace 'label' with the actual label column name\n",
    "\n",
    "# Calculate metrics\n",
    "accuracy = accuracy_score(actual_labels, predictions)\n",
    "precision = precision_score(actual_labels, predictions)\n",
    "recall = recall_score(actual_labels, predictions)\n",
    "f1 = f1_score(actual_labels, predictions)\n",
    "roc_auc = roc_auc_score(actual_labels, predictions)\n",
    "# Print metrics\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(f'Precision: {precision}')\n",
    "print(f'Recall: {recall}')\n",
    "print(f'F1 Score: {f1}')\n",
    "print(f'roc_auc Score: {roc_auc}')\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Assuming actual_labels and predictions are defined\n",
    "cm = confusion_matrix(actual_labels, predictions)\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt=\"d\", cmap='Blues')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('True Label')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "d5ece52a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[36252,  5890],\n",
       "       [ 1288, 38654]], dtype=int64)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "439ac364",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed file: FSGM-XAAE-IIoT.csv\n",
      "Accuracy: 0.7076319800698212, Precision: 0.8853277781167467, Recall: 0.6357405738320565, F1 Score: 0.7400571959416383\n",
      "roc_auc Score: 0.7398246317501604\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed file: BIM-XAAE-IIoT.csv\n",
      "Accuracy: 0.9356243751331683, Precision: 0.9226999841550225, Recall: 0.984108206900005, F1 Score: 0.952415278236297\n",
      "roc_auc Score: 0.9139135310993785\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed file: DF-XAAE-IIoT.csv\n",
      "Accuracy: 0.9346860505138249, Precision: 0.9226704752500853, Recall: 0.9825809924390366, F1 Score: 0.9516837925494832\n",
      "roc_auc Score: 0.9132389087296033\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed file: JSMA-XAAE-IIoT.csv\n",
      "Accuracy: 0.9219920344844541, Precision: 0.9212262343757482, Recall: 0.963202894196585, F1 Score: 0.9417470380887105\n",
      "roc_auc Score: 0.903537994960283\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed file: CW2-XAAE-IIoT.csv\n",
      "Accuracy: 0.7023953911461491, Precision: 0.8841308047010694, Recall: 0.6276538480797156, F1 Score: 0.7341364403398379\n",
      "roc_auc Score: 0.7358643214106518\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed file: CWinf-XAAE-IIoT.csv\n",
      "Accuracy: 0.9185255601265304, Precision: 0.9208607119647628, Recall: 0.9578639026588553, F1 Score: 0.9389979015572654\n",
      "roc_auc Score: 0.900910025459749\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Files to process\n",
    "files_to_process = [\n",
    "    'FSGM-XAAE-IIoT.csv',\n",
    "    'BIM-XAAE-IIoT.csv',\n",
    "    'DF-XAAE-IIoT.csv','JSMA-XAAE-IIoT.csv','CW2-XAAE-IIoT.csv','CWinf-XAAE-IIoT.csv'\n",
    "    # Add more file names as needed\n",
    "]\n",
    "\n",
    "ref_file = 'df_testing.csv'\n",
    "ref_df = pd.read_csv(ref_file)\n",
    "\n",
    "# Initialize MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "\n",
    "\n",
    "for file_name in files_to_process:\n",
    "    # Load and concatenate with ref_file\n",
    "    df = pd.read_csv(file_name)\n",
    "    df.columns = ref_df.columns\n",
    "    concatenated_df = pd.concat([ref_df, df], ignore_index=True)\n",
    "    \n",
    "    # Apply MinMax scaling\n",
    "    X_scaled = scaler.fit_transform(concatenated_df.iloc[:, :-1])\n",
    "    y_true = concatenated_df.iloc[:, -1].values  # Adjust the column index/name as necessary\n",
    "    \n",
    "    # Convert to tensors\n",
    "    X_tensor = torch.tensor(X_scaled, dtype=torch.float32)\n",
    "    y_tensor = torch.tensor(y_true, dtype=torch.long)\n",
    "    \n",
    "    # Create DataLoader\n",
    "    data_loader = DataLoader(TensorDataset(X_tensor, y_tensor), batch_size=32, shuffle=False)\n",
    "    \n",
    "    # Detect anomalies\n",
    "    anomaly_indices, _ = detect_anomalies(vae, nf, data_loader, threshold=2.5)\n",
    "    \n",
    "    # Initialize predictions\n",
    "    predictions = [0] * len(y_true)\n",
    "    for idx in anomaly_indices:\n",
    "        predictions[idx] = 1  # Mark as anomaly\n",
    "    \n",
    "    # Calculate metrics\n",
    "    accuracy = accuracy_score(y_true, predictions)\n",
    "    precision = precision_score(y_true, predictions)\n",
    "    recall = recall_score(y_true, predictions)\n",
    "    f1 = f1_score(y_true, predictions)\n",
    "    roc_auc = roc_auc_score(y_true, predictions)\n",
    "\n",
    "    # Print metrics\n",
    "    print(f'Processed file: {file_name}')\n",
    "    print(f'Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1 Score: {f1}')\n",
    "    print(f'roc_auc Score: {roc_auc}')\n",
    "\n",
    "    # Plot confusion matrix\n",
    "    cm = confusion_matrix(y_true, predictions)\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap='Blues')\n",
    "    plt.title(f'Confusion Matrix for {file_name}')\n",
    "    plt.xlabel('Predicted Label')\n",
    "    plt.ylabel('True Label')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e7dfda4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
